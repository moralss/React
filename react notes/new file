import React, { Component } from 'react';


class DisplayRecipes extends Component {

    displayOption() {
        console.log(this.element);
    }


    displayInList() {
        var number = 10;
        return this.props.recipes.map((element) => {
            return <button onClick={() => this.props.showRecipe(element)} style={{ fontSize: 20 }}> < a href="#"> {element.recipeName} </a> </button>
        })

    }


    render() {

        return (
            <div>
                <h1>display Recipe</h1>
                <ul>
                    {this.displayInList()}
                </ul>
                <div>
                    
                        {this.props.currentRecipes.recipeName}
                        <button >Delete</button>
                        <button >Edit</button>
                        
                </div>
            </div>
        );
    }
}


export default DisplayRecipes;



import React, { Component } from 'react';
import ModalPopUp from './ModalPopUp';
import DisplayRecipes from './DisplayRecipes'
import './App.css';
import { reactLocalStorage } from 'reactjs-localstorage';

class App extends Component {
  constructor() {
    super()
    this.state = {
      Recipes: [
        { recipeName: "cake", ingredients: ["milk"] },
        { recipeName: "cheese", ingredients: ["coffee"] }
      ],
      currentRecipe:{}

    }

    this.addRecipe = this.addRecipe.bind(this);
  }

 
  componentDidMount() {

    var retrievedObject = JSON.parse( localStorage.getItem('newRecipe'));
    this.setState({Recipes : retrievedObject});
    
  }

  showRecipe(recipe){
        this.setState({currentRecipe:recipe})
    }


  addRecipe(recipe, ingredients) {
    var copy = this.state.Recipes;
    var newRecipe = { recipeName: recipe, ingredients: [ingredients] }
    copy.push(newRecipe);
    this.setState({ Recipes: copy });

    localStorage.setItem('newRecipe', JSON.stringify(copy));

  }


  showForm() {
    return (
      <div>

      </div>
    )
  }


  render() {
    console.log(this.state);
    return (
      <div className="App">
        <br/>
        <ModalPopUp addRecipe={this.addRecipe} />
        <DisplayRecipes currentRecipes={this.state.currentRecipe} showRecipe={this.showRecipe.bind(this)} recipes={this.state.Recipes} />

      </div>
    );
  }
}

export default App;


import React, { Component } from 'react';

import { Modal, Button, Popover, Tooptip, OverlayTrigger, Tooltip } from 'react-bootstrap';


class ModalPopUp extends Component {

    constructor() {
        super();
        this.handleShow = this.handleShow.bind(this);
        this.handleClose = this.handleClose.bind(this);
        this.changeRequest = this.changeRequest.bind(this);
        
        this.state = {
            show: false
        };
    }


    changeRequest() {

        var recipeInput = this.refs.recipe.value;
        var recipeIngredients = this.refs.ingredients.value;
        
        this.props.addRecipe(recipeInput, recipeIngredients);
        if (recipeIngredients == "" || recipeInput == "" || recipeIngredients && recipeInput == "") {
            alert("please enter recipeInput");
        } else {
            this.setState({ show: false });
        }

    }

    handleClose() {

        this.setState({ show: false });

    }

    handleShow() {
        this.setState({ show: true });
    }

    render() {

        const tooltip = <Tooltip id="modal-tooltip">wow.</Tooltip>;
        return (
            <div>
                <Button bsStyle="primary" bsSize="large" onClick={this.handleShow}>
                    Add Recipe
                </Button>
                <Modal show={this.state.show} onHide={this.handleClose}>
                    <Modal.Header closeButton>
                        <Modal.Title>Modal heading</Modal.Title>
                    </Modal.Header>
                    <Modal.Body>
                        <form>
                            <label>Recipe</label>
                            <input type="text" ref="recipe" />
                            <label>Ingredients</label>
                            <input type="text" ref="ingredients" />
                        </form>

                    </Modal.Body>
                    <Modal.Footer>

                        <Button onClick={this.handleClose}>clear</Button>
                        <Button onClick={this.changeRequest}>add</Button>

                    </Modal.Footer>
                </Modal>
            </div>
        );
    }
}


export default ModalPopUp;


*********************************************************************************************************

skmdi

import React from 'react';
import Recipe from './recipe';
import '../index.css';
export default class Layout extends React.Component {
    constructor() {
        super();
        this.state = { allRecipes: [], recipeName: "", recipeIngredients: "" };
        this.deleteItem.bind(this);
        this.editList.bind(this)
        this.deleteItem.bind(this)
        this.addRecipeToList.bind(this)
        this.recipeNameRetriever.bind(this)
        this.recipeIngredientsRetriever.bind(this)
    }
    recipeNameRetriever(e) {
        this.setState({ recipeName: e.target.value })
    }
    recipeIngredientsRetriever(e) {
        this.setState({ recipeIngredients: e.target.value })
    }
    addRecipeToList() {
        var existingRecipe = this.state.allRecipes.find(element => { return element.recipeName === this.state.recipeName })
        if (this.state.recipeName === undefined || this.state.recipeName === "") {
            alert("unable to add empty product")
        } else if (existingRecipe) {
            alert("recipe name already exist")
        } else {
            var listWithNewRecipe = this.state.allRecipes;
            listWithNewRecipe.push({ recipeName: this.state.recipeName, recipeIngredients: this.state.recipeIngredients.split(",") })
            this.setState({ allRecipes: listWithNewRecipe, recipeName: "", recipeIngredients: "" })
            localStorage.setItem("valuedRecipes", JSON.stringify(this.state.allRecipes));
        }
        window.location.reload(true)
    }
    deleteItem(recipeTitle) {
        this.state.allRecipes.forEach(element => {
            if (element.recipeName === recipeTitle) {
                var positionOfTheRecipe = this.state.allRecipes.indexOf(element);
                this.state.allRecipes.splice(positionOfTheRecipe, positionOfTheRecipe + 1)
                this.setState({ allRecipes: this.state.allRecipes })
                localStorage.setItem("valuedRecipes", JSON.stringify(this.state.allRecipes));
            }
        })
    }
    editList(recipeTitle, recipeList, oldRecipeName) {
        this.state.allRecipes.forEach(element => {
            if (element.recipeName === oldRecipeName) {
                try {
                    var positionOfRecipe = this.state.allRecipes.indexOf(element);
                    this.state.allRecipes.splice(positionOfRecipe, positionOfRecipe + 1);
                    var newListWithUpdatedIngredients = this.state.allRecipes;
                    newListWithUpdatedIngredients.splice(positionOfRecipe, positionOfRecipe, { "recipeName": recipeTitle, recipeIngredients: recipeList.split(",") });
                    this.setState({ allRecipes: newListWithUpdatedIngredients });
                    localStorage.setItem("valuedRecipes", JSON.stringify(this.state.allRecipes));
                } catch (error) {
                }
            }
        })
    }
    componentDidMount() {
        var hint = JSON.parse(localStorage.getItem("valuedRecipes"));
        var listWithPreviousRecipes = [];
        try {
            hint.forEach(element => {
                listWithPreviousRecipes.push(element)
                this.setState({ allRecipes: listWithPreviousRecipes })
            });
        } catch (error) {
        }
    }
    render() {
        return (
            <div>
                <div className="container" id="inputDisplay">
                    <h1>Recipe Box</h1>
                    <h4>Recipe name</h4>
                    <input type="text" id="inputText" placeholder="e.g chocolate Cake" onChange={this.recipeNameRetriever.bind(this)} /> <br /><br />
                    <h4>Recipe recipeIngredients</h4>
                    <textarea placeholder="e.g baking Powder,chocolate flavouring,milk" onChange={this.recipeIngredientsRetriever.bind(this)} ></textarea><br />
                    <button className="btn btn-primary" onClick={this.addRecipeToList.bind(this)}>Add</button><br />
                </div>
                <div>
                    {this.state.allRecipes.map(element => {
                        return <div className="container-fluid" key={this.state.allRecipes.indexOf(element)}>
                            <Recipe key={this.state.allRecipes.indexOf(element)} name={element.recipeName} ingredients={element.recipeIngredients} deleteButton={this.deleteItem.bind(this)} editButton={this.editList.bind(this)} />
                        </div>
                    })}

                </div>
            </div >
        )
    }

import React from 'react';
import '../index.css';

export default class Recipe extends React.Component {
    constructor(props) {
        super();
        this.state = { list: [], del: [], edit: [], recipe: "", ingredients: [], hideOrShow: true, editOrNot: null };
        this.showAndHide.bind(this);
    }
    showAndHide() {
        if (this.hideOrShow) {
            try {
                this.setState({ recipe: this.props.name, ingredients: this.props.ingredients, list: this.props.ingredients.map(element => { return <li key={this.props.ingredients.indexOf(element)}>{element}</li> }), del: <button id="deleteButton" onClick={() => this.deleteItem()}>Delete {this.props.name}</button>, edit: <button id="editButton" onClick={() => this.editItem()}>Edit {this.props.name}</button> });
            } catch (error) {
                this.setState({ list: "this list is empty", del: <button id="deleteButton" onClick={() => this.deleteItem()}>Delete</button>, edit: <button id="editButton" onClick={() => this.editItem()}>Edit {this.props.name}</button> });
            }
            this.hideOrShow = false;
        } else {
            this.hideOrShow = true;
            this.setState({ list: null, del: null, edit: null });
        }
    }
    editRecipeName(e) {
        this.setState({ recipe: e.target.value })
    }
    editIngredients(e) {
        this.setState({ ingredients: e.target.value })
    }
    deleteItem() {
        this.props.deleteButton(this.props.name)
    }
    editItem() {
        this.setState({
            editOrNot: <div id="editIngredients">
                <h4>Recipe name</h4>
                <input type="text" id="inputText" placeholder="e.g chocolate Cake" onChange={this.editRecipeName.bind(this)} /> <br /><br />
                <h4>Recipe recipeIngredients</h4>
                <textarea placeholder="e.g baking Powder,chocolate flavouring,milk" onChange={this.editIngredients.bind(this)} ></textarea><br />
                <button onClick={this.saveEditedItems.bind(this)}>Save</button>
            </div>
        })
    }
    saveEditedItems() {
        this.props.editButton(this.state.recipe, this.state.ingredients, this.props.name, this.props.ingredients);
        this.setState({ editOrNot: null, list: null, del: null, edit: null })
    }
    render() {
        return (
            <div>
                <button className="btn btn-primary" onClick={this.showAndHide.bind(this)} id="ItemButton">{this.props.name}</button>
                <div className="container" id="listContainer">
                    <ul>
                        {this.state.list}
                    </ul>
                </div>
                {this.state.editOrNot}
                {this.state.del}
                {this.state.edit}
            </div>
        )
    }
}
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

import React, { Component } from 'react';
import EditRecipe from './EditRecipe';
import AddRecipe from './AddRecipe';

class DisplayRecipe extends Component {

    constructor(props) {
        super(props);
        this.state = {
            selectedRecipe: "",
            selectedIngredient: "",
            isDisplayMode: false,
            recipePosition: null,
            displayRecipes: [],
            hide: false
        }
        this.hideAfterDelete = this.hideAfterDelete.bind(this);
    }

    componentWillMount() {
        const localStore = localStorage.getItem("newRecipe");
        if (localStore) {
            const storeList = JSON.parse(localStore)
            this.setState({ displayRecipes: storeList });
        }
    }

    componentWillReceiveProps(props) {
        console.log("props", props);
        const newState = this.state.displayRecipes;
        
        if (this.props.newRecipe.recipeName) {
            const newRecipe = this.props.newRecipe;
            newState.push(newRecipe);
            this.setState({ displayRecipes: newState });
            localStorage.setItem("newRecipe", JSON.stringify(this.state.displayRecipes));
        }

    }

    displaySelected(element) {
        var indexPosition = this.state.displayRecipes.indexOf(element);
        this.setState({
            isDisplayMode: true,
            selectedRecipe: element.recipeName,
            selectedIngredient: element.ingredient,
            recipePosition: indexPosition,
        });

        this.state.hide ? this.setState({ hide: false }) : this.setState({ hide: true })
    }

    hideAfterDelete() {
        this.setState({ hide: false })
    }


    listToUpdate(array) {
        this.setState({ displayRecipes: array });
    }




    render() {

        return (

            <div style={{ display: "grid", justifyContent: "center" }}>
                <h1> Display </h1>
                <ul>

                    {this.state.displayRecipes.map((element) =>
                        <li style={{ listStyle: "none" }}>
                            <a href="#" onClick={() => this.displaySelected(element)}>
                                {element.recipeName} </a> </li>)}
                </ul>


                {this.state.isDisplayMode === true ? <EditRecipe
                    hideItems={this.hideAfterDelete}
                    recipeSelected={this.state}
                    indexToDelete={this.state.recipePosition}
                    listOfRecipes={this.state.displayRecipes}
                    updatedList={this.listToUpdate.bind(this)}
                    isDisplayMode={this.state.isDisplayMode}
                    hideStatus={this.state.hide}
                /> : null}
            </div>
        )
    }
}

export default DisplayRecipe;


import React, { Component } from 'react';
import DisplayRecipe from './DisplayRecipe';
import DeleteRecipe from './DeleteRecipe';


class EditRecipe extends Component {
    constructor(props) {
        super(props);
        this.state = {
            newChange: {},
            hideOrShow: false,
            recipeSelect: props.recipeSelected,
            displayMenu: true,
        }
    }

    handleChange(e) {
        let change = {};
        change[e.target.name] = e.target.value;
        this.setState({ newChange: change });
        console.log('state from edit form:', this.state);
    }

    submitForm(event) {
        event.preventDefault();
        console.log("finally recipe", this.refs.recipe.value);
        console.log("finally ingredient", this.refs.ingredient.value);
    }


    displayOptions() {
        return (
            <form style={{ paddingTop: 22 }} onSubmit={this.submitForm.bind(this)}>
                <label>Recipe</label>
                <input ref="recipe" onChange={this.handleChange.bind(this)}
                    value={this.state.recipeSelect.selectedRecipe} />
                <label>Ingredients</label>
                <input ref="ingredient" onChange={this.handleChange.bind(this)}
                    value={this.state.recipeSelect.selectedIngredient} />
                <button type="submit" value="submit">submit</button>
            </form>
        )
    }


    buttonEdit() {
        this.state.hideOrShow ? this.setState({ hideOrShow: false })
            : this.setState({ hideOrShow: true });
    }


    deleteRecipe() {
        const currentRecipeList = this.props.listOfRecipes;
        currentRecipeList.splice(this.props.indexToDelete, 1);
    
        localStorage.setItem("newRecipe", JSON.stringify(currentRecipeList));
        const localStore = localStorage.getItem("newRecipe");
        var object = JSON.parse(localStore);
        object.splice(this.props.indexToDelete, 1);
        this.props.updatedList(object);
        this.setState({ hide: false })
        this.props.hideItems()

    }

    render() {

        return (

            <div>
                {this.props.hideStatus === true ? <div>
                    <h1>{this.props.recipeSelected.selectedRecipe}</h1>
                    <h1>{this.props.recipeSelected.selectedIngredient}</h1>
                    <button onClick={this.deleteRecipe.bind(this)}>Delete</button>
                    <button onClick={this.buttonEdit.bind(this)}> Edit </button>
                </div> : null}
                {this.state.hideOrShow ? this.displayOptions() : null}
            </div >
        )
    }
}

export default EditRecipe;
